name: "build"

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

env:
  SHOULD_PUBLISH: ${{ github.ref == 'refs/heads/master' && !contains(github.event.push.commits.*.message, 'readme') }}
  PUBLISH_DIR: "${{ github.workspace }}/_publish"

jobs:
  build:
    name: "build"
    runs-on: "ubuntu-latest"
    outputs:
      PACKAGE_VERSION: ${{ steps.version-number.outputs.PACKAGE_VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        name: Python
        with:
          python-version: "3.x" # Version range or exact version of a Python version to use, using SemVer's version range syntax
          architecture: "x64" # optional x64 or x86. Defaults to x64 if not specified

      - name: "Get Commit Date"
        uses: actions/github-script@0.3.0
        id: author-date
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const commit_details = await github.git.getCommit({owner: context.repo.owner, repo: context.repo.repo, commit_sha: context.sha});
            return commit_details.data.author.date

      - name: "Set Version Number"
        id: version-number
        run: |
          echo "VERSION_NUMBER=$(date -d ${{ steps.author-date.outputs.result }} +%Y.%m.%d.%H%M)" >> $GITHUB_ENV
          PACKAGE_VERSION=$(cat "$PACKAGE_PROJECT" | grep -oPm1 "(?<=<PackageVersion>)[^<]+")
          echo "PACKAGE_VERSION=$PACKAGE_VERSION.${{ github.run_number }}" >> $GITHUB_ENV
          echo "::set-output name=PACKAGE_VERSION::$PACKAGE_VERSION.${{ github.run_number }}"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
          pipenv install

      - name: Lint
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings.
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run tests
        run: |
          pytest \
            -qq \
            --timeout=9 \
            --durations=10 \
            -n auto \
            --cov custom_components.meter_parser \
            -o console_output_style=count \
            -p no:sugar \
            tests

  deploy:
    name: "release"
    runs-on: "ubuntu-latest"
    needs: build
    if: ${{ github.ref == 'refs/heads/master' && !contains(github.event.push.commits.*.message, 'readme') }}
    environment:
      name: hacs

    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: "${{ needs.build.outputs.PACKAGE_VERSION }}"
          release_name: v${{ needs.build.outputs.PACKAGE_VERSION }}
          body: |
            Changes in this Release
            ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false
